#%NAME% 
#  Specific macros for Lima Eiger detector 
#%CATEGORY% Detection, Ccd

#%LOG%
#

def limaimeigersetup(ccdname) '{

  # --- common control init
  _limapar_controlinit(ccdname, 0)

  # --- callback macro on parameter set
  _limapar_addconfig_cb(ccdname, "_limaimeiger_setpar")

  # --- parameter definition
  _limapar_addconfig(ccdname, "temperature", LP_RW, 1)
  _limapar_addconfig(ccdname, "humidity", LP_RW, 1)

  _limapar_addconfig(ccdname, "countrate_correction", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "flatfield_correction", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "auto_summation", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "efficiency_correction", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "virtual_pixel_correction", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "pixel_mask", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "threshold_energy", LP_RW|LP_MOT, 1)
  _limapar_addconfig(ccdname, "photon_energy", LP_RW|LP_MOT, 1,"long")

  # --- parameter description
  _limapar_addtext(ccdname, "temperature", "Detector temperature")
  _limapar_addtext(ccdname, "humidity", "Detector humidity")

  _limapar_addtext(ccdname, "countrate_correction", "Countrate correction")
  _limapar_addtext(ccdname, "flatfield_correction", "Flatfield correction")
  _limapar_addtext(ccdname, "auto_summation", "Auto summation")
  _limapar_addtext(ccdname, "efficiency_correction", "Efficiency correction")
  _limapar_addtext(ccdname, "virtual_pixel_correction", "Virtual pixel correction")
  _limapar_addtext(ccdname, "pixel_mask", "Pixel mask")
  _limapar_addtext(ccdname, "threshold_energy", "Threshold Energy (Ev)")
  _limapar_addtext(ccdname, "photon_energy", "Photon energy (Working energy in Ev)")

  # --- timeout
  tango_io(LIMA_DEV[ccdname]["control"],"timeout",120)
}'

lima_addlimatype("Eiger", "limaimeigersetup", "limaimeigermenu")

def _limaimeiger_setpar(ccdname, parname, value) '{
  if (parname == "auto_summation") {
   #need to inform SPEC about possible image type change
   local unit
   unit  = LIMA_DEV[ccdname]["unit"]
   sleep(1)
   # need to call twice "resize" otherwise spec does update
   # the image_par() parameters (row_end,row_beg,col_end,col_beg) 
   image_par(unit, "resize")
   image_par(unit, "resize")
   ccd_createarray unit
  }

}'

def limaimeigermenu(ccdname) '{
  local items[] parname
  local nl option

  items["temperature"] = ""
  items["humidity"] = ""
  items["countrate_correction"] = ""
  items["flatfield_correction"] = ""
  items["auto_summation"] = ""
  items["efficiency_correction"] = ""
  items["virtual_pixel_correction"] = ""
  items["pixel_mask"] = ""
  items["threshold_energy"] = ""
  items["photon_energy"] = ""

  option= 1
  while (option) {
      for (parname in items) {
	  items[parname]= _limapar_get(ccdname, parname)
      }
      
      nl = _limamenu_printtitle(ccdname,"Configuration","config")

      tty_move(0,nl++,"(1) Configuration :")
      _limamenu_printitem(ccdname, "countrate_correction", items["countrate_correction"], nl++, 11)
      _limamenu_printitem(ccdname, "flatfield_correction", items["flatfield_correction"], nl++, 12)
      _limamenu_printitem(ccdname, "auto_summation", items["auto_summation"], nl++, 13)
      _limamenu_printitem(ccdname, "efficiency_correction", items["efficiency_correction"], nl++, 14)
      _limamenu_printitem(ccdname, "virtual_pixel_correction", items["virtual_pixel_correction"], nl++, 15)
      _limamenu_printitem(ccdname, "pixel_mask", items["pixel_mask"], nl++, 16)

      tty_move(0,++nl,"(2) Calibration :")
      ++nl
      _limamenu_printitem(ccdname, "photon_energy", items["photon_energy"], nl++, 21)
      _limamenu_printitem(ccdname, "threshold_energy", items["threshold_energy"], nl++, 22)

      tty_move(0,++nl,"(3) Detector status :")
      ++nl
      _limamenu_printitem(ccdname, "temperature", items["temperature"], nl++, 31)
      _limamenu_printitem(ccdname, "humidity", items["humidity"], nl++, 33)

      option= getval("\n\n\tOption ---> ", 0)
      printf("\n\n")
      
      if ((option==1)||(option==11))
	  _limapar_ask(ccdname, "countrate_correction", items["countrate_correction"])
      if ((option==1)||(option==12))
	  _limapar_ask(ccdname, "flatfield_correction", items["flatfield_correction"])
      if ((option==1)||(option==13))
	  _limapar_ask(ccdname, "auto_summation", items["auto_summation"])
      if ((option==1)||(option==14))
	  _limapar_ask(ccdname, "efficiency_correction", items["efficiency_correction"])
      if ((option==1)||(option==15))
	  _limapar_ask(ccdname, "virtual_pixel_correction", items["virtual_pixel_correction"])
      if ((option==1)||(option==16))
	  _limapar_ask(ccdname, "pixel_mask", items["pixel_mask"])

      if ((option==2)||(option==21))
	  _limapar_ask(ccdname, "photon_energy", items["photon_energy"])
      if ((option==2)||(option==22))
	  _limapar_ask(ccdname, "threshold_energy", items["threshold_energy"])
  }


}'

def limaimeigerdeleteMemoryFiles '{
  if ($# < 1) {
    print "Usage: $0 <ccdname>"
    exit
  }

  local  ccdname
  ccdname = "$1"
  tango_io(LIMA_DEV[ccdname]["config"],"deleteMemoryFiles")
}'

#%MACROS%
#%IMACROS%
#%TOC%
#%AUTHOR% S.Petitdemange
