#%TITLE% limaroi.mac
#%NAME% LIMA CCD ROI pseudo counters
#%DESCRIPTION%
# Implements ROIs as pseudo counters for LIMA CCD
#
#
#%END%

#%CATEGORY% Detection, Ccd

#%LOG%
#

#%IU%
#%MDESC%
# Initialise associative array %B%LIMA_ROI%B% and create user_getcounts cdef
#%BR% Automatically called from %B%limasetup%B%
#
def limaroisetup '{
  global LIMA_ROI[]
  list_test LIMA_ROI
	cdef("user_getcounts", "_limaroi_getcounts\n", "limaroi", 0x10)
}'

#%IU%
#%MDESC%
# Cleanup cdef and associative arrays used in limaroi 
#
def limaroiunsetup '{
  cdef("", "", "limaroi", "delete")
  _limaroi_removeall()
  unglobal LIMA_ROI LIMA_ROI_SRV
}'

def user_limaroi_add '#$*'
def user_limaroi_remove '#$*'
def user2_limaroi_add '#$*'
def user2_limaroi_remove '#$*'

#%UU% <ccdname> <roimne> <xbeg> <xend> <ybeg> <yend> 
#%MDESC% 
# Add or Modify a ROI
#
def limaroiadd '{
  if ($#!=7) {
    print "Usage: $0 <ccdname> <roimne> <roitype> <xbeg> <xend> <ybeg> <yend>"
    exit
  }
	_limaroi_add("$1", "$2", $3, $4, $5, $6, $7)
}'

#%IU% (ccdname, mne, xmin, xmax, ymin, ymax)
#%MDESC% 
# Add or Modify a ROI
#
def _limaroi_add(ccdname, roimne, roitype, xmin, xmax, ymin, ymax) '{

	if (list_item(LIMA_ROI, roimne)==-1) 
		list_add(LIMA_ROI, roimne)

	LIMA_ROI[roimne]["ccdname"]= ccdname
  LIMA_ROI[roimne]["type"]= roitype
	LIMA_ROI[roimne]["xmin"]= xmin
	LIMA_ROI[roimne]["xmax"]= xmax
	LIMA_ROI[roimne]["ymin"]= ymin
	LIMA_ROI[roimne]["ymax"]= ymax

  _limaroi_server_send(ccdname)
  user_limaroi_add ccdname roimne

  user2_limaroi_add ccdname roimne
 }'

#%UU% <roimne>
#%MDESC%
# Remove the specified ROI
#
def limaroiremove '{
  local roimne

  if ($#!=1) {
    print "Usage: $0 <roimne>"
    exit
  }
  roimne= "$1"

  if (list_check(LIMA_ROI, roimne)<=0) {
    _lima_error ; printf("Unknown ROI <%s>\n", roimne)
  } else {
    _limaroi_remove(roimne)
  }
}'

#%IU% (roimne)
#%MDESC%
#  Remove the specified ROI
#
def _limaroi_remove(roimne) '{
  local roinum ccdname

  ccdname= LIMA_ROI[roimne]["ccdname"]

  if ((roinum= cnt_num(roimne))!=-1) {
    S[roinum]= 0
  }
  # clean  associative arrays up in case someone is using them
  # via the user_ hook macros (e.i zaplima.mac !!)
  delete LIMA_ROI_SRV[ccdname][LIMA_ROI[roimne]["roi_id"]]
  list_remove(LIMA_ROI, roimne)
  if (LIMA_ROI_SRV[ccdname]["nroi"] >0) { 
   LIMA_ROI_SRV[ccdname]["nroi"]-=1 
   LIMA_ROI_SRV[ccdname]["nroi_srv"]-=1 
  }
  
  _limaroi_server_remove(ccdname, roimne)
  user_limaroi_remove ccdname roimne

  user2_limaroi_remove ccdname roimne
}'

#%UU% <ccdname>
#%MDESC%
#  Remove all ROIs for CCD <ccdname>
#%BR% if <ccdname> == %B%*%B%, remove all ROIs for all CCDs
#
def limaroiremoveall '{
  local ccdname
  if ($#!=1) {
    print "Usage: $0 <ccdname>"
    print "  If <ccdname>==\"*\", remove rois on all ccds"
    exit
  }
  ccdname= "$1"
  if ((ccdname != "*")&&(list_check(LIMA_DEV, ccdname)<=0)) {
    _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_removeall(ccdname)
  }
}'

#%IU%
#%MDESC%
def _limaroi_removeall(ccdname) '{
  local iroi roimne nroi delroi[]

  if ((!ccdname)||(ccdname=="*")) {
    for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
      roimne= list_item(LIMA_ROI, iroi)
      _limaroi_remove(roimne)
    }
  } else {
    nroi= _limaroi_getrois(ccdname, delroi)
    for (iroi=0; iroi<nroi; iroi++) {
      roimne= delroi[iroi]
      _limaroi_remove(roimne)
    }
  }
}'

#%UU% <ccdname>
#%MDESC%
# Remove all ROIs for CCD <ccdname> and resets ALL ROIs on roicounter device
#%BR% If <ccdname> == %B%*%B%, apply to all CCDs
#%BR% %B%Warning%B% : resets also ROIs on roicounter device which has not been
# necessary set by limaroi macros.
#
def limaroireset '{
  local ccdname
  if ($#!=1) {
    print "Usage: $0 <ccdname>"
    print "  If <ccdname>==\"*\", resets rois on all ccds"
    exit
  }
  ccdname= "$1"
  if ((ccdname != "*")&&(list_check(LIMA_DEV, ccdname)<=0)) {
      _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_reset(ccdname)
  }
}'
  
#%IU% (ccdname)
#%MDESC% 
# Remove all ROIs for CCD <ccdname>
#%BR% If <ccdname> == %B%*%B%, remove all ROIs for all CCDs
#
def _limaroi_reset(ccdname) '{
  local iroi roimne roinum roiccd
  local delroi[] nroi

  if ((!ccdname)||(ccdname=="*")) {
    nccd= _limaroi_getccds(ccds)
    for (iccd=0; iccd<nccd; iccd++) {
      _limaroi_removeall(ccds[iccd])
      _limaroi_server_reset(ccds[iccd])
    }
  } else {
    _limaroi_removeall(ccdname)
    _limaroi_server_reset(ccdname)
  }
}'

#%IU% (ccdname, rois)
#%MDESC%
# Return the number of rois and their mnemonic in input rois array
#
def _limaroi_getrois(ccdname, rois) '{
  local iroi roimne nroi
  nroi= 0
  for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
    roimne= list_item(LIMA_ROI, iroi)
    if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
       rois[nroi++]= roimne
    }
  }
  return (nroi)
}'

#%IU%
#%MDESC%
# Return the number of CCDs and their names in input ass. array
# on which ROIs has been configured
#
def _limaroi_getccds(ccds) '{
  local iroi roimne ccdname nccd found
  nccd= 0
  for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
    roimne= list_item(LIMA_ROI, iroi)
    ccdname= LIMA_ROI[roimne]["ccdname"]
    found= 0
    for (iccd=0; iccd<nccd; iccd++) {
      if (ccds[iccd]==ccdname) {
        found= 1
      }
    }
    if (!found) {
      ccds[nccd++]= ccdname
    }
  }
  return (nccd)
}'
#%IU% (ccdname, rois)
#%MDESC%
# Return the number of configured and enabled rois and their mnemonic in input rois array
#
def _limaroi_getroiactive(ccdname, rois) '{
  local iroi roimne roinum nroi
  nroi= 0
  for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
    roimne= list_item(LIMA_ROI, iroi)
    if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
      roinum= cnt_num(roimne)
      if ((roinum!=-1)&&(counter_par(roinum, "disable")!=1)) {
        rois[nroi++]= roimne
      }
    }
  }
  return (nroi)
}'
      

#%UU% <old_mne> <new_mne>
#%MDESC%
# Rename the ROI <old_mne> to <new_mne> keeping same ROI parameters
#
def limaroirename '{
  local oldmne newmne
  if ($#!=2) {
    print "Usage: $0 <old_mne> <new_mne>"
    exit
  }
  oldmne= "$1"
  newmne= "$2"
  if (list_check(LIMA_ROI, oldmne)<=0) {
    _lima_error ; printf("Unknown ROI <%s>\n", oldmne)
  } else {
    _limaroi_rename(oldmne, newmne)
  }
}' 

#%IU% (old_mne, new_mne)
#%MDESC%
# Rename the ROI <old_mne> to <new_mne> keeping same ROI parameters
#
def _limaroi_rename(oldmne, newmne) '{
	_limaroi_add(LIMA_ROI[oldmne]["ccdname"], newmne, LIMA_ROI[oldmne]["type"], \
               LIMA_ROI[oldmne]["xmin"], LIMA_ROI[oldmne]["xmax"], \
	             LIMA_ROI[oldmne]["ymin"], LIMA_ROI[oldmne]["ymax"])
	_limaroi_remove(oldmne)
}'


#%IU%
#%MDESC% 
# Read roicounter debice values and put then into corresponding spec counter.
def _limaroi_getcounts '{
  local iccd ccdname ccdunit
  local nroi iroi rois[]
  local roimne roinum roiarr roitype

  for (iccd= 1; iccd<=list_n(LIMA_DEV); iccd++) {
    ccdname= list_item(LIMA_DEV, iccd)
    ccdunit= LIMA_DEV[ccdname]["unit"]

    if (CCD_ON[ccdunit] && LIMA_DEV[ccdname]["roicounter"]) {
      # --- check if we need to read some rois
      nroi= _limaroi_getroiactive(ccdname, rois)
      if (nroi>0) {
        _limaroi_server_initarr(ccdname, 1)
        _limaroi_server_read(ccdname, 0)

        for (iroi= 0; iroi<nroi; iroi++) {
          roimne= rois[iroi]
          roinum= cnt_num(roimne)
          roiarr= sprintf("ROICNT_%s_%s", ccdname, roimne)
          roitype= LIMA_ROI[roimne]["type"]
          S[roinum]= @roiarr[0][roitype]
        }
      }
    }
  }
}'

#%UU% [<ccdname>]
#%MDESC%
# Show a menu allowing all modification on ROIs settings
#
def limaroi '{
  local ccdname idev

  ccdname= ($#==1) ? "$1" : 0
  if (ccdname) {
    if (list_check(LIMA_DEV, ccdname)<=0) {
      _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
    } else {
      _limaroi_menu(ccdname)
    }
  } else {
    if (list_n(LIMA_DEV)==1) {
      idev= 1
    } else {
      for (idev=1; idev<=list_n(LIMA_DEV); idev++) {
        ccdname= list_item(LIMA_DEV, idev)
        printf(" (%d) %s (%s, %s)\n", idev, ccdname, \
              LIMA_DEV[ccdname]["control"], LIMA_DEV[ccdname]["config"])
      }
      idev= getval(" >> Select one CCD", 0)
    }
    if ((idev>0)&&(idev<=list_n(LIMA_DEV)))
      _limaroi_menu(list_item(LIMA_DEV, idev))
  }
}'
      
#%IU% (ccdname)
#%MDESC% 
# Menu to Add/Modify/Delete/Save/Load ROIs of CCD <ccdname>
#
def _limaroi_menu(ccdname)'{
  local nb key
  local cmne roitype xmin xmax ymin ymax
  local ccdunit arrname
	local file

  ccdunit= LIMA_DEV[ccdname]["unit"]
  arrname= sprintf("image_data%d", ccdunit)

	while (1) {
		nb= _limaroi_show(ccdname)
		tty_move(0,nb++, "\[md\]A\[se\]dd/\[md\]R\[se\]emove/\[md\]M\[se\]odify ROI(s),") 
		tty_move(0,nb++, "\[md\]L\[se\]oad from/\[md\]S\[se\]ave to file,  or \[md\]Q\[se\]uit (0)? ")

		while ((key=input(-1))=="") {}
		key=substr(key,1,1)
		printf("\n\n")

		if (key=="q"||key=="Q"||asc(key)==10) break
		else if (key=="r"||key=="R") {
			cmne= getval("Counter mnemonic",0)
			if (cmne!="0") {
        if (cmne=="*")
          _limaroi_removeall(ccdname)
        else
          _limaroi_remove(cmne)
      }
		}
		else if (key=="a"||key=="A") {
			cmne= getval(" > Counter mnemonic    ", 0)
			if (cmne) {
				xmax= array_op("cols", @arrname)-1
				ymax= array_op("rows", @arrname)-1
        roitype= getval(" > Roi type [0=SUM, 1=AVG, 2=STD, 3=MIN, 4=MAX]", 0)
				xmin= getval(" > X min  ", 0)
				xmax= getval(" > X max  ", xmax)
				ymin= getval(" > Y min  ", 0)
				ymax= getval(" > Y max  ", ymax)
				_limaroi_add(ccdname, cmne, roitype, xmin, xmax, ymin, ymax)
			}
		}
		else if (key=="m"||key=="M") {
			cmne= getval(" > Counter mnemonic       ", 0)
			if (list_check(LIMA_ROI, cmne)>0) {
        roitype= getval(" > Roi type [0=SUM, 1=AVG, 2=STD, 3=MIN, 4=MAX]", LIMA_ROI[cmne]["type"])
				xmin= getval(" > X min          ", LIMA_ROI[cmne]["xmin"])
				xmax= getval(" > X max          ", LIMA_ROI[cmne]["xmax"])
				ymin= getval(" > Y min          ", LIMA_ROI[cmne]["ymin"])
				ymax= getval(" > Y max          ", LIMA_ROI[cmne]["ymax"])
				_limaroi_add(ccdname, cmne, roitype, xmin, xmax, ymin, ymax)
			}
		}
		else if (key=="s"||key=="S") {
			file= getval("Save ROIs to file [0:default file]", 0)
			if (file=="0") {
        _limaroi_save(ccdname, 0)
			} else {
        _limaroi_save(ccdname, file)
      }
			input("... Press Enter ...")
		}
		else if (key=="l"||key=="L") {
			file= getval("Load ROIs from file [0:default file]", 0)
			if (file=="0") {
        _limaroi_load(ccdname, 0)
      } else {
        _limaroi_load(ccdname, file)
      }
			input("... Press Enter ...")
		}
	}
}'

#%IU% (ccdname)
#%MDESC%
# Shows ROIs definition for CCD <ccdname>
#
def _limaroi_show(ccdname) '{
  local iroi nb roimne
	local cmne roitype xmin xmax ymin ymax status

	clscreen()
	tty_move(10,0,sprintf("\[md\]< LIMA ROI on %s >\[me\]", ccdname))
	tty_move(0,2,"           Counter Type    Xmin   Xmax   Ymin   Ymax.")
    
	nb= 3
	for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
		roimne= list_item(LIMA_ROI, iroi)
    if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
      roitype= "SUM"
      if (LIMA_ROI[roimne]["type"]==1) {
         roitype= "AVG"
      } else if (LIMA_ROI[roimne]["type"]==2) {
         roitype= "STD"
      } else if (LIMA_ROI[roimne]["type"]==3) {
         roitype= "MIN"
      } else if (LIMA_ROI[roimne]["type"]==4) {
         roitype= "MAX"
      }
		  xmin= LIMA_ROI[roimne]["xmin"]
		  xmax= LIMA_ROI[roimne]["xmax"]
		  ymin= LIMA_ROI[roimne]["ymin"]
		  ymax= LIMA_ROI[roimne]["ymax"]
      status = (cnt_num(roimne)==-1)?"    Not in config !!!":""
		  tty_move(0, nb++, sprintf("\[md\]%18s  %3s  %6d %6d %6d %6d\[me\] %s", \
				                roimne, roitype, xmin, xmax, ymin, ymax, status))
    }
	}
	tty_move(0,nb++,"--------------------------------------------------------")
	nb++
	return (nb)
}'


#%UU% <ccdname> [<filename>]
#%MDESC% 
# Save ROIs definition of CCD <ccdname> in a file. 
#%BR% If <filename> is not specified, save to the standard location
#
def limaroisave '{
	local filename mne roi
  
  if (($#!=1)&&($#!=2)) {
    print "Usage: $0 <ccdname> [<filename>]"
    exit
  }
  ccdname= "$1"
  filename= ($#==2) ? "$2" : 0

  if (list_check(LIMA_DEV, ccdname)<=0) {
    _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_save(ccdname, filename)
  }
}'

#%IU% (ccdname, filename)
#%MDESC% 
# Save ROIs definition of CCD <ccdname> in a file. 
#%BR% If <filename>==0, save to the standard location
#
def _limaroi_save(ccdname, filename) '{
  if (!filename) {
    file= sprintf("%s/local/spec/userconf/limaroi_%s.def.%s", BLISSADM, ccdname, USER)
  } else {
    file= filename
  }
  if (file_info(file, "-e")) {
    unix(sprintf("/bin/rm -f %s", file))
  }

  if (on(file)==-1) {
    _lima_error ccdname ; printf("Cannot open file <%s>\n", file)
  } else {
    offt
    printf("# LIMA ROI %s\n", ccdname)
    printf("# name xmin xmax ymin ymax\n")
    for (iroi=1; iroi<=list_n(LIMA_ROI); iroi++) {
      roimne= list_item(LIMA_ROI, iroi)
      if (LIMA_ROI[roimne]["ccdname"]==ccdname) {
        printf("%s %d %d %d %d %d \n", roimne, LIMA_ROI[roimne]["type"], \
              LIMA_ROI[roimne]["xmin"], LIMA_ROI[roimne]["xmax"], \
              LIMA_ROI[roimne]["ymin"], LIMA_ROI[roimne]["ymax"])
      }
    }
    ont; close(file)
    _lima_trace ccdname ; printf("Saved ROIs to <%s>\n", file)
  }
}'

#%UU% <ccdname> [<filename>]
#%MDESC% 
# Load ROIs definition for CCD <ccdname> from a file. 
#%BR% If <filename> is not specified, save to the standard location
#%BR% Loading rois from file will erase current roi settings.
#
def limaroiload '{
	local ccdname filename
  
  if (($#!=1)&&($#!=2)) {
    print "Usage: $0 <ccdname> [<filename>]"
    exit
  }
  ccdname= "$1"
  filename= ($#==2) ? "$2" : 0
  
  if (list_check(LIMA_DEV, ccdname)<=0) {
    _lima_error ; printf("Unknown LIMA CCD <%s>\n", ccdname)
  } else {
    _limaroi_load(ccdname, filename)
  }
}'

#%IU% (ccdname, filename)
#%MDESC%
# Load ROIs definition for CCD <ccdname> from a file. 
#%BR% if <filename>==0, save to the standard location
# 
def _limaroi_load(ccdname, filename) '{
  local file nroi line
  local roimne roitype xmin xmax ymin ymax

  if (!filename) {
    file= sprintf("%s/local/spec/userconf/limaroi_%s.def.%s", BLISSADM, ccdname, USER)
  } else {
    file= filename
  }
  if (!file_info(file, "-e")) {
    _lima_error ccdname ; printf("Cannot find file <%s>\n", file)
  } else {
    _limaroi_removeall(ccdname)
    nroi= 0

    for (line= getline(file); line!=-1; line=getline(file)) {
      if (substr(line, 0, 1)=="#")
        continue
      if (sscanf(line, "%s %d %d %d %d %d", roimne, roitype, xmin, xmax, ymin, ymax)==6) {
        _limaroi_add(ccdname, roimne, roitype, xmin, xmax, ymin, ymax)
        nroi++
      } else {
        _lima_error ccdname ; printf("Wrong parameters on line <%s>\n", line)
      }
    }
    getline(file, "close")
    _lima_trace ccdname ; printf("%d ROIs loaded from <%s>\n", nroi, file)
  }
}'

# -----------------------------------------------------------------------------

def _limaroi_server_defined(ccdname) '{
  return (LIMA_DEV[ccdname]["roicounter"]!=0)
}'

#%IU%
#%MDESC%
# Return name of roicounter device if it exits.
#%BR% If not, return 0 and print an error message
#
def _limaroi_server_getds(ccdname) '{
  local roisrv
  roisrv= list_getpar(LIMA_DEV, ccdname, "roicounter")
  if (!roisrv) {
    _lima_error ccdname ; printf("No ROI counter device configured !!")
    return (0)
  }
  return (roisrv)
}'

#%IU%
#%MDESC%
# Reset roi on the server
#
def _limaroi_server_reset(ccdname) '{
  local roisrv
  roisrv= _limaroi_server_getds(ccdname)
  if (roisrv) {
    tango_io(roisrv, "Stop")
    tango_io(roisrv, "clearAllRois")
  }
}'

#%IU%
#%MDESC%
# Send all rois config to the server
#
def _limaroi_server_send(ccdname) '{
  global LIMA_ROI_SRV[]

  local state srv
  local nroi iroi roimne sendroi[] roi_id[]
  local roi_srv[] nroi_srv
  local xmin xmax ymin ymax

  srv= _limaroi_server_getds(ccdname)
  if (!srv)
    return (-1)

  # if server stopped, no yet roi
  state= tango_get(srv, "State")
  nroi= _limaroi_getrois(ccdname, sendroi)
  if (nroi) {
    # send the updated list of rois
    tango_io(srv,"addNames",sendroi,roi_id)

    # prepare arg array for server 
    local long array argroi[5*nroi]

    for (iroi=0; iroi<nroi; iroi++) {
      roimne= sendroi[iroi]
		  xmin= LIMA_ROI[roimne]["xmin"]
		  xmax= LIMA_ROI[roimne]["xmax"]
		  ymin= LIMA_ROI[roimne]["ymin"]
		  ymax= LIMA_ROI[roimne]["ymax"]

      argroi[5*iroi + 0]= roi_id[iroi]
      argroi[5*iroi + 1]= (xmax>xmin) ? xmin : xmax
      argroi[5*iroi + 2]= (ymax>ymin) ? ymin : ymax
      argroi[5*iroi + 3]= fabs(xmax-xmin)+1
      argroi[5*iroi + 4]= fabs(ymax-ymin)+1

      # save roi ID in roi params array
      LIMA_ROI[roimne]["roi_id"]= roi_id[iroi]
      # save a reversed list to get roimne from roi id
      LIMA_ROI_SRV[ccdname][roi_id[iroi]]= roimne
    }

    if (state!=0) {
      # set the RunLevel high enough to allow other operations like Mask/ffield/Background
      # to be applied first at level 0.
      tango_put(srv,"RunLevel", 5)
      tango_io(srv, "Start")
    }
    tango_io(srv, "setRois", argroi)
  }
  LIMA_ROI_SRV[ccdname]["nroi"]= nroi
  # get the number of defined rois on the server
  # If the server is not running there is no roi already
  if (state==0) { 
    nroi_srv=tango_io(srv,"getNames",roi_srv)
  } else nroi_srv = 0
  LIMA_ROI_SRV[ccdname]["nroi_srv"]= nroi_srv
  
  return (nroi)
}'

#%IU%
#%MDESC%
# Remove one roi from server
#
def _limaroi_server_remove(ccdname, roimne) '{
  local srv delrois[]
  srv= _limaroi_server_getds(ccdname)
  if (!srv)
    return (-1)

  delrois[0]= roimne
  tango_io(srv, "removeRois", delrois)
}'

#%IU%
#%MDESC%
# Initialise array for reading roi values from server
#
def _limaroi_server_initarr(ccdname, maxpt) '{
  local iroi roiarr nroi
  local srv nroi_srv

  # nroi is the number of actually used rois
  nroi= LIMA_ROI_SRV[ccdname]["nroi"]

  # nroi_srv is the the number of rois defined on the server
  srv = _limaroi_server_getds(ccdname)

  nroi_srv=tango_io(srv,"getNames",roi_srv)
  LIMA_ROI_SRV[ccdname]["nroi_srv"]= nroi_srv

  if (nroi_srv<nroi) nroi_srv=nroi
  if (nroi) {
    # LIMA_ROI is a list of ALL rois of ALL lima CCDs
    for (iroi=1; iroi<=LIMA_ROI[0]; iroi++) {
      local roi_mne
      roi_mne = list_item(LIMA_ROI,iroi)
      # Create roiarr only for a ROI of this detector
      if ( list_getpar(LIMA_ROI,roi_mne,"ccdname") == ccdname ) {
        roiarr= sprintf("ROICNT_%s_%s", ccdname, roi_mne)
        double array @roiarr[maxpt][5]
        @roiarr[:][:]= 0.
      }
    }
    roiarr= sprintf("ROICNT_READ_%s", ccdname)
    # roi_id/frame_nb/sum/avg/std/min/max --> 7 values
    # nroi_srv must be the number of rois on the server!
    double array @roiarr[1+(nroi_srv*7*maxpt)]
  }
  return (nroi)
}'

#%IU%
#%MDESC%
# Read roi counter values from server
#
def _limaroi_server_read(ccdname, frompt) '{
  local nroi srv
  local lastpt readarr readnb lastrd
  local idx roi_id frame_id roiarr

  nroi= LIMA_ROI_SRV[ccdname]["nroi"]
  if (!nroi)
    return (0)

  srv= _limaroi_server_getds(ccdname)
  if (!srv)
    return (-1)

  lastpt= tango_get(srv, "CounterStatus")
  if (lastpt >= frompt) {
    local srvarr[]
    readarr= sprintf("ROICNT_READ_%s", ccdname)
    readnb= tango_io(srv, "readCounters", (frompt==-1?0:frompt), @readarr)

    # new command returns rois as a list of roi result for each frame by roi:
    # e.g for 2 rois and 3 frames:
    #result[0]  --> roi id 0
    #result[1] --> frame 0 (or frompt)
    #result[2:6] --> sum/avg/std/min/max
    #result[7] --> roi id 0
    #result[8[ --> frame 1 (or frompt+1)
    #result[9:13] --> sum/avg/std/min/max
    #resut[14] --> roi id 0
    #result[15] --> frame 2
    #result[16:20] --> sum/avg/std/min/max
    #resut[21] --> roi id 1
    #result[22] --> frame 0      
    #....
    
    # 7 values for each frame (roi_id/frame_nb/sum/avg/std/min/max) times nroi
    lastrd= frompt  

    for (idx= 0; idx<readnb; idx+=7) {
	    roi_id= @readarr[idx]
	    frame_id= @readarr[idx+1]
      if (frame_id > lastrd)
	      lastrd = frame_id
      if (LIMA_ROI_SRV[ccdname][roi_id]) {
	    roiarr= sprintf("ROICNT_%s_%s", ccdname, LIMA_ROI_SRV[ccdname][roi_id])
	    @roiarr[frame_id][0:4] = @readarr[idx+2:idx+6]
      }
    }
    lastrd= (lastrd > 0) ? lastrd : 0
    return (lastrd)
  } else {
    return (0)
  }
}'


#%MACROS%
#%IMACROS%
#%TOC%
#%AUTHOR% E.Papillon
