#%NAME% 
#  Specific macros for Lima SlsDetector 
#%CATEGORY% Detection, Ccd

#%LOG%
#
#$Revision: $
#

def _limaslsdetector_setup(ccdname) '{
  local aux_n aux_s aux_d aux_k i

  # --- common control init
  _limapar_controlinit(ccdname, 0)

  # --- parameter definition
  _limapar_addconfig(ccdname, "config_fname", LP_READ, 1)
  _limapar_addconfig(ccdname, "hostname_list", LP_READ, 64)
  _limapar_addconfig(ccdname, "dac_name_list", LP_READ, 64)
  _limapar_addconfig(ccdname, "dac_name_list_mv", LP_READ, 64)
  _limapar_addconfig(ccdname, "adc_name_list", LP_READ, 64)

  _limapar_addconfig(ccdname, "pixel_depth", LP_RW|LP_LIST|LP_CB, 1)
  _limapar_addconfig(ccdname, "raw_mode", LP_RW|LP_CB, 1)
  _limapar_addconfig(ccdname, "show_mv", LP_RW, 1)

  _limapar_addconfig(ccdname, "clock_div", LP_RW|LP_LIST, 1)
  _limapar_addconfig(ccdname, "readout_flags", LP_RW|LP_LIST, 1)

  _limapar_addconfig(ccdname, "threshold_energy", LP_RW, 1)
  _limapar_addconfig(ccdname, "all_trim_bits", LP_RW, 64)

  # --- callback macro on parameter set
  _limapar_addconfig_cb(ccdname, "_limaslsdetector_setpar")

  # --- parameter description
  _limapar_addtext(ccdname, "config_fname", "Configuration file name")
  _limapar_addtext(ccdname, "hostname_list", "Module host names")
  _limapar_addtext(ccdname, "dac_name_list", "DAC names")
  _limapar_addtext(ccdname, "dac_name_list_mv", "mV DAC names")
  _limapar_addtext(ccdname, "adc_name_list", "ADC names")

  _limapar_addtext(ccdname, "pixel_depth", "Image Pixel Depth")
  _limapar_addtext(ccdname, "raw_mode", "Raw Image Mode")
  _limapar_addtext(ccdname, "show_mv", "Show DAC values in milli-volts")

  _limapar_addtext(ccdname, "clock_div", "Speed Clock Divider")
  _limapar_addtext(ccdname, "readout_flags", "Readout Flags")

  _limapar_addtext(ccdname, "threshold_energy", "Threshold Energy (eV)")
  _limapar_addtext(ccdname, "all_trim_bits", "Trimming bits for all pixels")

  # --- DACs
  aux_n = _limapar_get(ccdname, "dac_name_list", -1)
  for (i = 0; i < aux_n; i++) {
    aux_s = LIMA_VALS[i]
    aux_d = sprintf("DAC %s", substr(aux_s, 5))
    if (aux_s == "dac_HVNew")
      aux_d = "High Voltage (V)"
    _limapar_addconfig(ccdname, aux_s, LP_RW, 64)
    _limapar_addtext(ccdname, aux_s, aux_d)
  }

  aux_n = _limapar_get(ccdname, "dac_name_list_mv", -1)
  for (i = 0; i < aux_n; i++) {
    aux_s = LIMA_VALS[i]
    aux_k = substr(substr(aux_s, 1, length(aux_s) - 3), 5)
    aux_d = sprintf("DAC %s (mV)", aux_k)
    _limapar_addconfig(ccdname, aux_s, LP_RW, 64)
    _limapar_addtext(ccdname, aux_s, aux_d)
  }

  # --- ADCs
  aux_n = _limapar_get(ccdname, "adc_name_list", -1)
  for (i = 0; i < aux_n; i++) {
    aux_s = LIMA_VALS[i]
    aux_d = sprintf("ADC %s", substr(aux_s, 5))
    _limapar_addconfig(ccdname, aux_s, LP_RW, 64)
    _limapar_addtext(ccdname, aux_s, aux_d)
  }

}'

cdef("_limapar_set_pre_hook",  "_limaslsdetector_pre_par_set\n",  "slsdetector")
cdef("_limapar_set_post_hook", "_limaslsdetector_post_par_set\n", "slsdetector")

lima_addlimatype("SlsDetector", "_limaslsdetector_setup", \
                                "_limaslsdetector_menu")

def _limaslsdetector_pre_par_set '{
  if (LIMA_DEV[ccdname]["type"] == "SlsDetector") {
  }
}'

def _limaslsdetector_post_par_set '{
  if (LIMA_DEV[ccdname]["type"] == "SlsDetector") {
  }
}'

def _limaslsdetector_setpar(ccdname, parname, value) '{
  if ((parname == "pixel_depth") || (parname == "raw_mode")) {
    # inform SPEC about possible image type/size change
    local unit
    unit = LIMA_DEV[ccdname]["unit"]
    # need to call twice "resize" otherwise spec does update
    # the image_par() parameters (row_end,row_beg,col_end,col_beg) 
    image_par(unit, "resize")
    image_par(unit, "resize")
    ccd_createarray unit
  }
}'

def _limaslsdetector_menu(ccdname) '{
  local items[] aitems[] parname i aux_s aux_n val
  local nl option

  items["config_fname"] = ""
  items["pixel_depth"] = ""
  items["raw_mode"] = ""
  items["clock_div"] = ""
  items["readout_flags"] = ""
  items["threshold_energy"] = -2

  aitems["hostname_list"] = ""
  aitems["dac_HVNew"] = ""

  option = 1

  while (option) {
    for (parname in items) {
      items[parname] = _limapar_get(ccdname, parname)
      if (parname == "raw_mode")
        items[parname] = items[parname] ? "Yes" : "No"
    }

    for (parname in aitems) {
      aux_n = _limapar_get(ccdname, parname, -1)
      aux_s = ""
      for (i = 0; i < aux_n; i++)
        aux_s = sprintf("%s%s%7s", aux_s, i ? " " : "", LIMA_VALS[i])
      aitems[parname] = sprintf("[ %s ]", aux_s)
    }

    nl = _limamenu_printtitle(ccdname, "Information", "config")

    tty_move(0, nl++, "(1) Information:")
    _limamenu_printitem(ccdname, "config_fname", items["config_fname"], \
			nl++, 11)
    _limamenu_printitem(ccdname, "hostname_list", aitems["hostname_list"], \
			nl++, 12)
    nl++

    tty_move(0, nl++, "(2) Configuration:")
    _limamenu_printitem(ccdname, "pixel_depth", items["pixel_depth"], \
			nl++, 21)
    _limamenu_printitem(ccdname, "raw_mode", items["raw_mode"], \
			nl++, 22)
    _limamenu_printitem(ccdname, "clock_div", items["clock_div"], \
			nl++, 23)
    _limamenu_printitem(ccdname, "readout_flags", items["readout_flags"], \
			nl++, 24)
    nl++

    tty_move(0, nl++, "(3) Calibration:")
    _limamenu_printitem(ccdname, "dac_HVNew", aitems["dac_HVNew"], \
			nl++, 31)
    _limamenu_printitem(ccdname, "threshold_energy", items["threshold_energy"],\
 			nl++, 32)
    nl++

    tty_move(0, nl++, "(4) DACS & TrimBits Menu .................... >>")
    tty_move(0, nl++, "(5) Monitoring Menu ......................... >>")
    nl++

    option = getval("\n\n\tOption ---> ", 0)
    printf("\n\n")

    if ((option == 2) || (option == 21))
      _limapar_ask(ccdname, "pixel_depth", items["pixel_depth"])
    if ((option == 2) || (option == 22)) {
      val = (items["raw_mode"] == "Yes")
      if (yesno("Raw Image Mode", val) != val)
        _limapar_set(ccdname, "raw_mode", !val)
    }
    if ((option == 2) || (option == 23))
      _limapar_ask(ccdname, "clock_div", items["clock_div"])
    if ((option == 2) || (option == 24))
      _limapar_ask(ccdname, "readout_flags", items["readout_flags"])

    if ((option == 3) || (option == 31))
      _limaslsdetector_ask_dac_trim_bits(ccdname, "dac_HVNew", -1)
    if ((option == 3) || (option == 32))
      _limapar_ask(ccdname, "threshold_energy", items["threshold_energy"])

    if (option == 4)
      _limaslsdetector_dac_menu(ccdname)

    if (option == 5)
      _limaslsdetector_monitor_menu(ccdname)
  }
}'

def _limaslsdetector_nb_modules(ccdname) '{
  return _limapar_get(ccdname, "hostname_list", -1)
}'

def _limaslsdetector_module_name(ccdname, idx) '{
  return _limapar_get(ccdname, "hostname_list", idx)
}'

def _limaslsdetector_set_dac_trim_bits(ccdname, parname, idx, val) '{
  local devname arrname nbdet alen aidx txt dets
  devname = _limapar_getdevname(ccdname, parname)
  nbdet = _limaslsdetector_nb_modules(ccdname)

  if ((idx < -1) || (idx >= nbdet)) {
    printf("Invalid DAC detector index: %s\n", idx)
    return -1
  }

  arrname = LIMA_DEV[ccdname]["arrname"]
  txt = @arrname[parname]["desc"]
  if (idx >= 0)
    dets = sprintf("module %s", _limaslsdetector_module_name(ccdname, idx))
  else
    dets = "all modules"
  printf("Setting %s to %s on %s...\n", txt, val, dets)

  alen = (idx >= 0) ? nbdet : 1
  aidx = (idx >= 0) ? idx : 0
  long array darr[alen]
  darr = -1
  darr[aidx] = val
  tango_put(devname, parname, darr)
  sleep(1)
  printf("Done!\n")
}'

def _limaslsdetector_ask_dac_trim_bits(ccdname, parname, idx) '{
  local ret[]

  ret = _limaslsdetector_ask_mod_idx_val(ccdname, parname, idx)
  if (ret["idx"] != -2)
    _limaslsdetector_set_dac_trim_bits(ccdname, parname, ret["idx"], ret["val"])

  input("Type Enter to continue ...")
}'

def _limaslsdetector_ask_mod_idx_val(ccdname, parname, idx) '{
  local arrname txt val val2 new_val all_eq aux_n i ret[]

  arrname = LIMA_DEV[ccdname]["arrname"]
  txt = @arrname[parname]["desc"]
  if (idx == -2)
    idx = getval(sprintf("Module index to apply \"%s\" on [-1=All]", txt), -1)
  val = _limapar_get(ccdname, parname, idx)
  if (idx < 0) {
    aux_n = val
    val = val2 = 0
    for (i = 0; i < aux_n; i++) {
      val += LIMA_VALS[i]
      val2 += pow(LIMA_VALS[i], 2)
    }
    all_eq = (val2 == pow(val, 2) / aux_n)
    val = int(val / aux_n)
  }
  new_val = getval(txt, val)
  if ((new_val < 0) || \
      ((new_val == val) && \
       ((idx >= 0) || all_eq || !yesno("Apply value to all modules", 0)))) {
    printf("Skipping %s write\n", txt)
    idx = -2
  }

  ret["idx"] = idx
  ret["val"] = new_val
  return ret
}'

def _limaslsdetector_dac_menu(ccdname) '{
  local items[] parname i j dac_n dac_name[] aux_n aux_s aux_v is_dac
  local nl option foption loption

  global LIMA_SLSDETECTOR[]

  for (i = 0; i < 2; i++) {
    parname = sprintf("dac_name_list%s", i ? "_mv" : "")
    dac_n = _limapar_get(ccdname, parname, -1)
    for (j = 0; j < dac_n; j++) {
      dac_name[j] = LIMA_VALS[j]
      items[dac_name[j]] = ""
    }
  }

  items["hostname_list"] = ""
  items["show_mv"] = ""
  items["all_trim_bits"] = ""

  option = 1

  while (option) {
    for (parname in items) {
      if (parname == "show_mv") {
        items[parname] = LIMA_SLSDETECTOR[parname] ? "Yes" : "No"
        continue 
      }
      aux_n = _limapar_get(ccdname, parname, -1)
      aux_s = ""
      for (i = 0; i < aux_n; i++)
        aux_s = sprintf("%s%s%7s", aux_s, i ? " " : "", LIMA_VALS[i])
      is_dac = (substr(parname, 1, 3) == "dac")
      items[parname] = sprintf("%s[ %s ]", is_dac ? "" : " ", aux_s)
    }

    aux_v = (items["show_mv"] == "Yes")
    parname = sprintf("dac_name_list%s", aux_v ? "_mv" : "")
    dac_n = _limapar_get(ccdname, parname, -1)
    for (i = 0; i < dac_n; i++)
      dac_name[i] = LIMA_VALS[i]

    nl = _limamenu_printtitle(ccdname, "DAC Control", "config")

    tty_move(0, nl++, "(1) Information:")
    _limamenu_printitem(ccdname, "hostname_list", items["hostname_list"], \
			nl++, 11)
    _limamenu_printitem(ccdname, "show_mv", items["show_mv"], \
			nl++, 12)
    nl++

    tty_move(0, nl++, "(2) DAC status:")
    foption = loption = 201
    for (i = 0; i < dac_n; i++) {
      parname = dac_name[i]
      _limamenu_printitem(ccdname, parname, items[parname], nl++, loption++)
    }
    nl++

    tty_move(0, nl++, "(3) Trim bits:")
    _limamenu_printitem(ccdname, "all_trim_bits", items["all_trim_bits"],\
			nl++, 31)
    option = getval("\n\n\tOption ---> ", 0)
    printf("\n\n")

    if ((option == 1) || (option == 12)) {
      aux_v = (items["show_mv"] == "Yes")
      LIMA_SLSDETECTOR["show_mv"] = yesno("Show mV DACs", aux_v)
    }

    if ((option == 2) || ((option >= foption) && (option < loption))) {
      i = option - foption
      parname = dac_name[i]
      _limaslsdetector_ask_dac_trim_bits(ccdname, parname, -2)
    }

    if ((option == 3) || (option == 31))
      _limaslsdetector_ask_dac_trim_bits(ccdname, "all_trim_bits", -2)
  }
}'

def _limaslsdetector_monitor_menu(ccdname) '{
  local items[] parname i adc_n adc_name[] aux_n aux_s aux_f is_adc
  local nl option

  adc_n = _limapar_get(ccdname, "adc_name_list", -1)
  for (i = 0; i < adc_n; i++) {
    adc_name[i] = LIMA_VALS[i]
    items[adc_name[i]] = ""
  }

  items["hostname_list"] = ""

  option = 1

  while (option) {
    for (parname in items) {
      aux_n = _limapar_get(ccdname, parname, -1)
      is_adc = (substr(parname, 1, 3) == "adc")
      aux_f = sprintf("%%s%%s%s", is_adc ? "%7.2f" : "%7s")
      aux_s = ""
      for (i = 0; i < aux_n; i++)
        aux_s = sprintf(aux_f, aux_s, i ? " " : "", LIMA_VALS[i])
      items[parname] = sprintf("%s[ %s ]", is_adc ? "" : " ", aux_s)
    }

    nl = _limamenu_printtitle(ccdname, "Monitoring", "config")

    tty_move(0, nl++, "(1) Information:")
    _limamenu_printitem(ccdname, "hostname_list", items["hostname_list"], \
			nl++, 11)
    nl++

    tty_move(0, nl++, "(2) ADC status:")
    option = 201
    for (i = 0; i < adc_n; i++) {
      parname = adc_name[i]
      _limamenu_printitem(ccdname, parname, items[parname], nl++, option++)
    }

    option = getval("\n\n\tOption ---> ", 0)
    printf("\n\n")
  }
}'

def slsdetmot_config(mnum, type, unit, module, channel) '{
  local ccdname

  ccdname = slsdetmot_ADDR
  if (type == "ctrl") {
    printf("Using Lima SlsDetector motor on %s\n", ccdname)
  }

}'

def slsdetmot_cmd(mnum, cmd, p1, p2) '{
  local parname ccdname devname is_dac is_trim is_arr val

  if (mnum == "..")
    return 0

  ccdname = motor_par(mnum, "address")
  parname = motor_par(mnum, "name")
  idx = motor_par(mnum, "idx")

  devname = _limapar_getdevname(ccdname, parname)

  is_dac = (substr(parname, 1, 3) == "dac")
  is_trim = (parname == "all_trim_bits")
  is_arr = (is_dac || is_trim)

  if (cmd == "status")
    return 0

  if (cmd == "position") {
    aux_n = _limapar_get(ccdname, parname, idx)
    if (!is_arr)
      return aux_n

    val = 0
    for (i = 0; i < aux_n; i++)
      val += LIMA_VALS[i]
    return val / aux_n
  }

  if (cmd == "start_one") {
    if (is_arr) {
      ulong array arr[1]
      arr[0] = p1
      tango_put(devname, parname, arr)
      sleep(1)
    } else {
      _limapar_set(ccdname, parname, p1)
    }
  }

}'


#%MACROS%
#%IMACROS%
#%TOC%
#%AUTHOR% A. Homs, $Revision: $, $Date: 2017/04 $
